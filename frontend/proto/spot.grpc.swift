//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: spot.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `LocationServiceClient`, then call methods of this protocol to make API calls.
internal protocol LocationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: LocationServiceClientInterceptorFactoryProtocol? { get }

  func locationSession(
    callOptions: CallOptions?,
    handler: @escaping (StreamUpdate) -> Void
  ) -> BidirectionalStreamingCall<QueryUpdate, StreamUpdate>
}

extension LocationServiceClientProtocol {
  internal var serviceName: String {
    return "LocationService"
  }

  /// Bidirectional streaming call to LocationSession
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func locationSession(
    callOptions: CallOptions? = nil,
    handler: @escaping (StreamUpdate) -> Void
  ) -> BidirectionalStreamingCall<QueryUpdate, StreamUpdate> {
    return self.makeBidirectionalStreamingCall(
      path: LocationServiceClientMetadata.Methods.locationSession.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLocationSessionInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension LocationServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "LocationServiceNIOClient")
internal final class LocationServiceClient: LocationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: LocationServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: LocationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the LocationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LocationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct LocationServiceNIOClient: LocationServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: LocationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the LocationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LocationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol LocationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: LocationServiceClientInterceptorFactoryProtocol? { get }

  func makeLocationSessionCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<QueryUpdate, StreamUpdate>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension LocationServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return LocationServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: LocationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLocationSessionCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<QueryUpdate, StreamUpdate> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: LocationServiceClientMetadata.Methods.locationSession.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLocationSessionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension LocationServiceAsyncClientProtocol {
  internal func locationSession<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<StreamUpdate> where RequestStream: Sequence, RequestStream.Element == QueryUpdate {
    return self.performAsyncBidirectionalStreamingCall(
      path: LocationServiceClientMetadata.Methods.locationSession.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLocationSessionInterceptors() ?? []
    )
  }

  internal func locationSession<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<StreamUpdate> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == QueryUpdate {
    return self.performAsyncBidirectionalStreamingCall(
      path: LocationServiceClientMetadata.Methods.locationSession.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLocationSessionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct LocationServiceAsyncClient: LocationServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: LocationServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: LocationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol LocationServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'locationSession'.
  func makeLocationSessionInterceptors() -> [ClientInterceptor<QueryUpdate, StreamUpdate>]
}

internal enum LocationServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LocationService",
    fullName: "LocationService",
    methods: [
      LocationServiceClientMetadata.Methods.locationSession,
    ]
  )

  internal enum Methods {
    internal static let locationSession = GRPCMethodDescriptor(
      name: "LocationSession",
      path: "/LocationService/LocationSession",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

